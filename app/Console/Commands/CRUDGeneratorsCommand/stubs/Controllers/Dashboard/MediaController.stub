<?php

namespace App\Http\Controllers\Dashboard;

use App\Http\Controllers\Controller;
use App\Http\Controllers\CrudController;
use App\Http\Resources\{{studlySingular}}Resource;
use App\Interfaces\{{studlySingular}}RepositoryInterface;
use App\Models\Setting;
use App\Models\{{studlySingular}};
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Inertia\Inertia;
class {{studlySingular}}Controller extends CrudController
{
    public {{studlySingular}}RepositoryInterface $BaseRepository;
    protected $model;

    public function __construct({{studlySingular}}RepositoryInterface $BaseRepository , {{studlySingular}} ${{studlySingular}})
    {
        $this->authorizeResource({{studlySingular}}::class);
        $this->BaseRepository = $BaseRepository;
        $this->model = ${{studlySingular}};

    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Request $request)
    {
        $queries = ['term', 'page','length'];
        foreach ($this->headers() as $key => $value) {
            $queries[] = $value['name'];
        }
        ${{lowercasePlural}} = {{studlySingular}}Resource::collection(
            $this->BaseRepository->all($request->only($queries))
        );



        return Inertia::render('Dashboard/{{studlySingular}}/Index', [
            'items' => ${{lowercasePlural}},
            '{{studlySingular}}_counts' => {{studlySingular}}::count(),
            'filters' => $request->all($queries),
            'headers' => $this->headers(),
        ]);
    }



     /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function headers()
    {

        return [
            ['name' => 'id', 'label' => '#' , 'type' => "text" , 'checked'  =>  get_table_settings('{{lowercasePlural}}', 'id',true)],
            ['name' => 'name', 'label' => 'Name' , 'type' => "text" , 'checked'  =>  get_table_settings('{{lowercasePlural}}', 'name',true)],
            ['name' => 'order_id', 'label' => 'Order' , 'type' => "text" , 'checked'  =>  get_table_settings('{{lowercasePlural}}', 'order_id',false)],
            ['name' => 'active', 'label' => 'Active' , 'type' => "boolean" , 'checked'  =>  get_table_settings('{{lowercasePlural}}', 'active',true)],
        ];
    }




    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $request->validate([
            'name' => 'required|string',
            'order_id' => 'required|numeric|min:1',
            'active' => 'required|boolean',
            'media' => 'required|array',
            'media.id' => 'required|exists:media,id'
        ]);

        ${{lowercasePlural}} = $this->BaseRepository->create($request->only('name', 'order_id' , 'active'));
        ${{lowercaseSingular}}->media()->sync($request->media['id']);

        return back()->with('success', '{{studlySingular}} Created Successfully');
    }


    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \App\Models\{{studlySingular}}  ${{studlySingular}}
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request,  $id)
    {
        $request->validate([
            'name' => 'required|string',
            'order_id' => 'required|numeric|min:1',
            'active' => 'required|boolean',
            'media' => 'required|array',
            'media.id' => 'required|exists:media,id'
        ]);
        ${{studlySingular}} = $this->model->find($id);


        ${{lowercasePlural}} = $this->BaseRepository->update($request->only('name', 'order_id','active'),${{studlySingular}}->id);
        ${{lowercaseSingular}}->media()->sync($request->media['id']);

        return back()->with('success', '{{studlySingular}} updated successfully');

    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  \App\Models\{{studlySingular}}  ${{studlySingular}}
     * @return \Illuminate\Http\Response
     */
    public function delete({{studlySingular}} ${{studlySingular}})
    {

        request()->validate([
            'Ids' => ['required', 'array']
        ]);

        foreach ({{studlySingular}}::find(request('Ids')) as ${{studlySingular}}) {
            ${{studlySingular}}->delete();
        }
        return back()->with('success', '{{studlySingular}} deleted successfully');
    }
}
